{
  "name": "patrol completion",
  "enabled": true,
  "description": "Tracks what rooms you've visited in an area, for patrolling purposes",
  "type": "group",
  "id": 1,
  "items": [
    {
      "type": "alias",
      "name": "Toggle patrolling",
      "enabled": true,
      "id": 3,
      "matching": "exact",
      "whole_words": false,
      "case_sensitive": false,
      "prefix_suffix": true,
      "actions": [
        {
          "action": "script",
          "script": "let patrolTrack = !!get_variable('patroltrack');\n\nif (patrolTrack) {\n    patrolTrack = false;\n    display_notice('Done recording patrol', 'green');\n} else {\n    patrolTrack = true;\n    client.seenRooms = []; // Doesn't really matter where we clear this\n    display_notice('Recording patrol', 'green');\n}\n\nset_variable('patroltrack', patrolTrack);"
        }
      ],
      "text": "patrol record",
      "items": []
    },
    {
      "type": "alias",
      "name": "Patrol status",
      "enabled": true,
      "id": 6,
      "matching": "exact",
      "whole_words": false,
      "case_sensitive": false,
      "prefix_suffix": true,
      "actions": [
        {
          "action": "script",
          "script": "if (client.seenRooms === undefined) {\n    display_notice('No patrol has been recorded yet.');\n    return;\n}\n\nlet seenRooms = client.seenRooms;\n// For some reason client.mapper stores room IDs as a string. This probably won't break.\nlet allRooms = client.mapper.map_rooms.filter(x => x !== undefined);\nlet unseenRooms = allRooms.filter((x) => !seenRooms.includes(Number.parseInt(x.id)));\n// The length of seenRooms could include rooms from outside of this area, so we don't use it.\nlet seenRoomCount = allRooms.length - unseenRooms.length;\nlet percentCompleted = 100 * seenRoomCount / allRooms.length;\n\nif (unseenRooms.length == 0) {\n    display_notice('Every room in this area has been patrolled!', 'green');\n} else {\n\tdisplay_notice(`There are ${unseenRooms.length} rooms left in this area. (${percentCompleted.toFixed(0)}% completed)`);\n}"
        }
      ],
      "text": "patrol status"
    },
    {
      "type": "alias",
      "name": "Patrol unseen",
      "enabled": true,
      "id": 7,
      "matching": "exact",
      "whole_words": false,
      "case_sensitive": false,
      "prefix_suffix": true,
      "actions": [
        {
          "action": "script",
          "script": "if (client.seenRooms === undefined) {\n    display_notice('No patrol has been recorded yet.');\n    return;\n}\n\nlet seenRooms = client.seenRooms;\nlet allRooms = client.mapper.map_rooms;\n// For some reason client.mapper stores room IDs as a string. This probably won't break.\nlet unseenRooms = allRooms.filter(x => x !== undefined && !seenRooms.includes(Number.parseInt(x.id)));\nlet roomList = unseenRooms.slice(0, 10).map(x => `'${x.title}' (${x.id})`);\n\nlet header;\n\nif (unseenRooms.length > 10) {\n    header = 'Rooms not yet patrolled (truncated)'\n} else if (unseenRooms.length > 1) {\n    header = `${unseenRooms.length} rooms left`\n} else if (unseenRooms.length == 1) {\n    header = `${unseenRooms.length} room left`\n} else {\n    display_notice('This area is completely patrolled!', 'green');\n    return;\n}\n\ndisplay_notice(`${header}:\\n${roomList.join('\\n')}`);"
        }
      ],
      "text": "patrol unseen"
    },
    {
      "type": "function",
      "name": "onGMCP",
      "enabled": true,
      "id": 4,
      "code": "// Place any code here you'd like to run when a GMCP message is received\n// - The GMCP message is received as \"args.gmcp_method\" and \"args.gmcp_args\"\nif (args.gmcp_method == 'Room.Info') {\n    run_function('roomChangeHook', args, 'Patrol completion');\n}",
      "items": []
    },
    {
      "type": "function",
      "name": "roomChangeHook",
      "enabled": true,
      "id": 5,
      "code": "let roomName = args.gmcp_args.name;\nlet roomNum = args.gmcp_args.num;\nlet trackingEnabled = !!get_variable('patroltrack');\nlet seenRooms = client.seenRooms;\n\nif (!trackingEnabled) {\n    return;\n}\n\n// I'm sure there's some idiomatic way to do this\nif (seenRooms === undefined) {\n    client.seenRooms = [];\n    seenRooms = client.seenRooms;\n}\n\nif (!seenRooms.includes(roomNum)) {\n    seenRooms.push(roomNum);\n}"
    }
  ]
}
